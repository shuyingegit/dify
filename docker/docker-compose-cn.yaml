# ==================================================================
# 警告：此文件由 generate_docker_compose 自动生成
# 请勿直接修改此文件。请更新 .env.example 或 docker-compose-template.yaml 
# 并重新生成此文件。
# ==================================================================

# 共享环境变量配置
x-shared-env: &shared-api-worker-env
  # 控制台 API URL
  CONSOLE_API_URL: ${CONSOLE_API_URL:-}
  # 控制台 Web URL
  CONSOLE_WEB_URL: ${CONSOLE_WEB_URL:-}
  # 服务 API URL
  SERVICE_API_URL: ${SERVICE_API_URL:-}
  # 应用 API URL
  APP_API_URL: ${APP_API_URL:-}
  # 应用 Web URL
  APP_WEB_URL: ${APP_WEB_URL:-}
  # 文件 URL
  FILES_URL: ${FILES_URL:-}
  # 日志级别
  LOG_LEVEL: ${LOG_LEVEL:-INFO}
  # 日志文件路径
  LOG_FILE: ${LOG_FILE:-/app/logs/server.log}
  # 日志文件最大大小(MB)
  LOG_FILE_MAX_SIZE: ${LOG_FILE_MAX_SIZE:-20}
  # 日志文件备份数量
  LOG_FILE_BACKUP_COUNT: ${LOG_FILE_BACKUP_COUNT:-5}
  # 日志日期格式
  LOG_DATEFORMAT: ${LOG_DATEFORMAT:-%Y-%m-%d %H:%M:%S}
  # 日志时区
  LOG_TZ: ${LOG_TZ:-UTC}
  # 调试模式
  DEBUG: ${DEBUG:-false}
  # Flask调试模式
  FLASK_DEBUG: ${FLASK_DEBUG:-false}
  # 密钥
  SECRET_KEY: ${SECRET_KEY:-sk-9f73s3ljTXVcMT3Blb3ljTqtsKiGHXVcMT3BlbkFJLK7U}
  # 初始密码
  INIT_PASSWORD: ${INIT_PASSWORD:-}
  # 部署环境
  DEPLOY_ENV: ${DEPLOY_ENV:-PRODUCTION}
  # 更新检查URL
  CHECK_UPDATE_URL: ${CHECK_UPDATE_URL:-https://updates.dify.ai}
  # OpenAI API基础URL
  OPENAI_API_BASE: ${OPENAI_API_BASE:-https://api.openai.com/v1}
  # 是否启用迁移
  MIGRATION_ENABLED: ${MIGRATION_ENABLED:-true}
  # 文件访问超时时间(秒)
  FILES_ACCESS_TIMEOUT: ${FILES_ACCESS_TIMEOUT:-300}
  # 访问令牌过期时间(分钟)
  ACCESS_TOKEN_EXPIRE_MINUTES: ${ACCESS_TOKEN_EXPIRE_MINUTES:-60}
  # 应用最大活动请求数
  APP_MAX_ACTIVE_REQUESTS: ${APP_MAX_ACTIVE_REQUESTS:-0}
  # 应用最大执行时间(秒)
  APP_MAX_EXECUTION_TIME: ${APP_MAX_EXECUTION_TIME:-1200}
  # Dify绑定地址
  DIFY_BIND_ADDRESS: ${DIFY_BIND_ADDRESS:-0.0.0.0}
  # Dify端口
  DIFY_PORT: ${DIFY_PORT:-5001}
  # 服务器工作进程数量
  SERVER_WORKER_AMOUNT: ${SERVER_WORKER_AMOUNT:-}
  # 服务器工作进程类型
  SERVER_WORKER_CLASS: ${SERVER_WORKER_CLASS:-}
  # Celery工作进程类型
  CELERY_WORKER_CLASS: ${CELERY_WORKER_CLASS:-}
  # Gunicorn超时时间
  GUNICORN_TIMEOUT: ${GUNICORN_TIMEOUT:-360}
  # Celery工作进程数量
  CELERY_WORKER_AMOUNT: ${CELERY_WORKER_AMOUNT:-}
  # 是否启用Celery自动扩展
  CELERY_AUTO_SCALE: ${CELERY_AUTO_SCALE:-false}
  # Celery最大工作进程数
  CELERY_MAX_WORKERS: ${CELERY_MAX_WORKERS:-}
  # Celery最小工作进程数
  CELERY_MIN_WORKERS: ${CELERY_MIN_WORKERS:-}
  # API工具默认连接超时时间
  API_TOOL_DEFAULT_CONNECT_TIMEOUT: ${API_TOOL_DEFAULT_CONNECT_TIMEOUT:-10}
  # API工具默认读取超时时间
  API_TOOL_DEFAULT_READ_TIMEOUT: ${API_TOOL_DEFAULT_READ_TIMEOUT:-60}
  # 数据库用户名
  DB_USERNAME: ${DB_USERNAME:-postgres}
  # 数据库密码
  DB_PASSWORD: ${DB_PASSWORD:-difyai123456}
  # 数据库主机
  DB_HOST: ${DB_HOST:-db}
  # 数据库端口
  DB_PORT: ${DB_PORT:-5432}
  # 数据库名称
  DB_DATABASE: ${DB_DATABASE:-dify}
  # SQLAlchemy连接池大小
  SQLALCHEMY_POOL_SIZE: ${SQLALCHEMY_POOL_SIZE:-30}
  # SQLAlchemy连接池回收时间
  SQLALCHEMY_POOL_RECYCLE: ${SQLALCHEMY_POOL_RECYCLE:-3600}
  # 是否启用SQLAlchemy日志
  SQLALCHEMY_ECHO: ${SQLALCHEMY_ECHO:-false}
  # PostgreSQL最大连接数
  POSTGRES_MAX_CONNECTIONS: ${POSTGRES_MAX_CONNECTIONS:-100}
  # PostgreSQL共享缓冲区大小
  POSTGRES_SHARED_BUFFERS: ${POSTGRES_SHARED_BUFFERS:-128MB}
  # PostgreSQL工作内存
  POSTGRES_WORK_MEM: ${POSTGRES_WORK_MEM:-4MB}
  # PostgreSQL维护工作内存
  POSTGRES_MAINTENANCE_WORK_MEM: ${POSTGRES_MAINTENANCE_WORK_MEM:-64MB}
  # PostgreSQL有效缓存大小
  POSTGRES_EFFECTIVE_CACHE_SIZE: ${POSTGRES_EFFECTIVE_CACHE_SIZE:-4096MB}
  # Redis主机
  REDIS_HOST: ${REDIS_HOST:-redis}
  # Redis端口
  REDIS_PORT: ${REDIS_PORT:-6379}
  # Redis用户名
  REDIS_USERNAME: ${REDIS_USERNAME:-}
  # Redis密码
  REDIS_PASSWORD: ${REDIS_PASSWORD:-difyai123456}
  # 是否使用Redis SSL
  REDIS_USE_SSL: ${REDIS_USE_SSL:-false}
  # Redis数据库编号
  REDIS_DB: ${REDIS_DB:-0}
  # 是否使用Redis哨兵
  REDIS_USE_SENTINEL: ${REDIS_USE_SENTINEL:-false}
  # Redis哨兵列表
  REDIS_SENTINELS: ${REDIS_SENTINELS:-}
  # Redis哨兵服务名称
  REDIS_SENTINEL_SERVICE_NAME: ${REDIS_SENTINEL_SERVICE_NAME:-}
  # Redis哨兵用户名
  REDIS_SENTINEL_USERNAME: ${REDIS_SENTINEL_USERNAME:-}
  # Redis哨兵密码
  REDIS_SENTINEL_PASSWORD: ${REDIS_SENTINEL_PASSWORD:-}
  # Redis哨兵套接字超时时间
  REDIS_SENTINEL_SOCKET_TIMEOUT: ${REDIS_SENTINEL_SOCKET_TIMEOUT:-0.1}
  # 是否使用Redis集群
  REDIS_USE_CLUSTERS: ${REDIS_USE_CLUSTERS:-false}
  # Redis集群列表
  REDIS_CLUSTERS: ${REDIS_CLUSTERS:-}
  # Redis集群密码
  REDIS_CLUSTERS_PASSWORD: ${REDIS_CLUSTERS_PASSWORD:-}
  # Celery消息代理URL
  CELERY_BROKER_URL: ${CELERY_BROKER_URL:-redis://:difyai123456@redis:6379/1}
  # 是否使用代理SSL
  BROKER_USE_SSL: ${BROKER_USE_SSL:-false}
  # 是否使用Celery哨兵
  CELERY_USE_SENTINEL: ${CELERY_USE_SENTINEL:-false}
  # Celery哨兵主节点名称
  CELERY_SENTINEL_MASTER_NAME: ${CELERY_SENTINEL_MASTER_NAME:-}
  # Celery哨兵套接字超时时间
  CELERY_SENTINEL_SOCKET_TIMEOUT: ${CELERY_SENTINEL_SOCKET_TIMEOUT:-0.1}
  # Web API跨域允许源
  WEB_API_CORS_ALLOW_ORIGINS: ${WEB_API_CORS_ALLOW_ORIGINS:-*}
  # 控制台跨域允许源
  CONSOLE_CORS_ALLOW_ORIGINS: ${CONSOLE_CORS_ALLOW_ORIGINS:-*}
  # 存储类型
  STORAGE_TYPE: ${STORAGE_TYPE:-opendal}
  # OpenDAL方案
  OPENDAL_SCHEME: ${OPENDAL_SCHEME:-fs}
  # OpenDAL文件系统根目录
  OPENDAL_FS_ROOT: ${OPENDAL_FS_ROOT:-storage}
  # S3端点
  S3_ENDPOINT: ${S3_ENDPOINT:-}
  # S3区域
  S3_REGION: ${S3_REGION:-us-east-1}
  # S3存储桶名称
  S3_BUCKET_NAME: ${S3_BUCKET_NAME:-difyai}
  # S3访问密钥
  S3_ACCESS_KEY: ${S3_ACCESS_KEY:-}
  # S3密钥
  S3_SECRET_KEY: ${S3_SECRET_KEY:-}
  # 是否使用AWS托管IAM
  S3_USE_AWS_MANAGED_IAM: ${S3_USE_AWS_MANAGED_IAM:-false}
  # Azure Blob账户名称
  AZURE_BLOB_ACCOUNT_NAME: ${AZURE_BLOB_ACCOUNT_NAME:-difyai}
  # Azure Blob账户密钥
  AZURE_BLOB_ACCOUNT_KEY: ${AZURE_BLOB_ACCOUNT_KEY:-difyai}
  # Azure Blob容器名称
  AZURE_BLOB_CONTAINER_NAME: ${AZURE_BLOB_CONTAINER_NAME:-difyai-container}
  # Azure Blob账户URL
  AZURE_BLOB_ACCOUNT_URL: ${AZURE_BLOB_ACCOUNT_URL:-https://<your_account_name>.blob.core.windows.net}
  # Google Storage存储桶名称
  GOOGLE_STORAGE_BUCKET_NAME: ${GOOGLE_STORAGE_BUCKET_NAME:-your-bucket-name}
  # Google Storage服务账户JSON Base64
  GOOGLE_STORAGE_SERVICE_ACCOUNT_JSON_BASE64: ${GOOGLE_STORAGE_SERVICE_ACCOUNT_JSON_BASE64:-your-google-service-account-json-base64-string}
  # 阿里云OSS存储桶名称
  ALIYUN_OSS_BUCKET_NAME: ${ALIYUN_OSS_BUCKET_NAME:-your-bucket-name}
  # 阿里云OSS访问密钥
  ALIYUN_OSS_ACCESS_KEY: ${ALIYUN_OSS_ACCESS_KEY:-your-access-key}
  # 阿里云OSS密钥
  ALIYUN_OSS_SECRET_KEY: ${ALIYUN_OSS_SECRET_KEY:-your-secret-key}
  # 阿里云OSS端点
  ALIYUN_OSS_ENDPOINT: ${ALIYUN_OSS_ENDPOINT:-https://oss-ap-southeast-1-internal.aliyuncs.com}
  # 阿里云OSS区域
  ALIYUN_OSS_REGION: ${ALIYUN_OSS_REGION:-ap-southeast-1}
  # 阿里云OSS认证版本
  ALIYUN_OSS_AUTH_VERSION: ${ALIYUN_OSS_AUTH_VERSION:-v4}
  # 阿里云OSS路径
  ALIYUN_OSS_PATH: ${ALIYUN_OSS_PATH:-your-path}
  # 腾讯云COS存储桶名称
  TENCENT_COS_BUCKET_NAME: ${TENCENT_COS_BUCKET_NAME:-your-bucket-name}
  # 腾讯云COS密钥
  TENCENT_COS_SECRET_KEY: ${TENCENT_COS_SECRET_KEY:-your-secret-key}
  # 腾讯云COS密钥ID
  TENCENT_COS_SECRET_ID: ${TENCENT_COS_SECRET_ID:-your-secret-id}
  # 腾讯云COS区域
  TENCENT_COS_REGION: ${TENCENT_COS_REGION:-your-region}
  # 腾讯云COS方案
  TENCENT_COS_SCHEME: ${TENCENT_COS_SCHEME:-your-scheme}
  # Oracle Cloud端点
  OCI_ENDPOINT: ${OCI_ENDPOINT:-https://objectstorage.us-ashburn-1.oraclecloud.com}
  # Oracle Cloud存储桶名称
  OCI_BUCKET_NAME: ${OCI_BUCKET_NAME:-your-bucket-name}
  # Oracle Cloud访问密钥
  OCI_ACCESS_KEY: ${OCI_ACCESS_KEY:-your-access-key}
  # Oracle Cloud密钥
  OCI_SECRET_KEY: ${OCI_SECRET_KEY:-your-secret-key}
  # Oracle Cloud区域
  OCI_REGION: ${OCI_REGION:-us-ashburn-1}
  # 华为云OBS存储桶名称
  HUAWEI_OBS_BUCKET_NAME: ${HUAWEI_OBS_BUCKET_NAME:-your-bucket-name}
  # 华为云OBS密钥
  HUAWEI_OBS_SECRET_KEY: ${HUAWEI_OBS_SECRET_KEY:-your-secret-key}
  # 华为云OBS访问密钥
  HUAWEI_OBS_ACCESS_KEY: ${HUAWEI_OBS_ACCESS_KEY:-your-access-key}
  # 华为云OBS服务器
  HUAWEI_OBS_SERVER: ${HUAWEI_OBS_SERVER:-your-server-url}
  # 火山引擎TOS存储桶名称
  VOLCENGINE_TOS_BUCKET_NAME: ${VOLCENGINE_TOS_BUCKET_NAME:-your-bucket-name}
  # 火山引擎TOS密钥
  VOLCENGINE_TOS_SECRET_KEY: ${VOLCENGINE_TOS_SECRET_KEY:-your-secret-key}
  # 火山引擎TOS访问密钥
  VOLCENGINE_TOS_ACCESS_KEY: ${VOLCENGINE_TOS_ACCESS_KEY:-your-access-key}
  # 火山引擎TOS端点
  VOLCENGINE_TOS_ENDPOINT: ${VOLCENGINE_TOS_ENDPOINT:-your-server-url}
  # 火山引擎TOS区域
  VOLCENGINE_TOS_REGION: ${VOLCENGINE_TOS_REGION:-your-region}
  # 百度云OBS存储桶名称
  BAIDU_OBS_BUCKET_NAME: ${BAIDU_OBS_BUCKET_NAME:-your-bucket-name}
  # 百度云OBS密钥
  BAIDU_OBS_SECRET_KEY: ${BAIDU_OBS_SECRET_KEY:-your-secret-key}
  # 百度云OBS访问密钥
  BAIDU_OBS_ACCESS_KEY: ${BAIDU_OBS_ACCESS_KEY:-your-access-key}
  # 百度云OBS端点
  BAIDU_OBS_ENDPOINT: ${BAIDU_OBS_ENDPOINT:-your-server-url}
  # Supabase存储桶名称
  SUPABASE_BUCKET_NAME: ${SUPABASE_BUCKET_NAME:-your-bucket-name}
  # Supabase API密钥
  SUPABASE_API_KEY: ${SUPABASE_API_KEY:-your-access-key}
  # Supabase URL
  SUPABASE_URL: ${SUPABASE_URL:-your-server-url}
  # 向量存储类型
  VECTOR_STORE: ${VECTOR_STORE:-weaviate}
  # Weaviate端点
  WEAVIATE_ENDPOINT: ${WEAVIATE_ENDPOINT:-http://weaviate:8080}
  # Weaviate API密钥
  WEAVIATE_API_KEY: ${WEAVIATE_API_KEY:-WVF5YThaHlkYwhGUSmCRgsX3tD5ngdN8pkih}
  # Qdrant URL
  QDRANT_URL: ${QDRANT_URL:-http://qdrant:6333}
  # Qdrant API密钥
  QDRANT_API_KEY: ${QDRANT_API_KEY:-difyai123456}
  # Qdrant客户端超时时间
  QDRANT_CLIENT_TIMEOUT: ${QDRANT_CLIENT_TIMEOUT:-20}
  # 是否启用Qdrant GRPC
  QDRANT_GRPC_ENABLED: ${QDRANT_GRPC_ENABLED:-false}
  # Qdrant GRPC端口
  QDRANT_GRPC_PORT: ${QDRANT_GRPC_PORT:-6334}
  # Milvus URI
  MILVUS_URI: ${MILVUS_URI:-http://127.0.0.1:19530}
  # Milvus令牌
  MILVUS_TOKEN: ${MILVUS_TOKEN:-}
  # Milvus用户名
  MILVUS_USER: ${MILVUS_USER:-root}
  # Milvus密码
  MILVUS_PASSWORD: ${MILVUS_PASSWORD:-Milvus}
  # MyScale主机
  MYSCALE_HOST: ${MYSCALE_HOST:-myscale}
  # MyScale端口
  MYSCALE_PORT: ${MYSCALE_PORT:-8123}
  # MyScale用户名
  MYSCALE_USER: ${MYSCALE_USER:-default}
  # MyScale密码
  MYSCALE_PASSWORD: ${MYSCALE_PASSWORD:-}
  # MyScale数据库
  MYSCALE_DATABASE: ${MYSCALE_DATABASE:-dify}
  # MyScale FTS参数
  MYSCALE_FTS_PARAMS: ${MYSCALE_FTS_PARAMS:-}
  # Couchbase连接字符串
  COUCHBASE_CONNECTION_STRING: ${COUCHBASE_CONNECTION_STRING:-couchbase://couchbase-server}
  # Couchbase用户名
  COUCHBASE_USER: ${COUCHBASE_USER:-Administrator}
  # Couchbase密码
  COUCHBASE_PASSWORD: ${COUCHBASE_PASSWORD:-password}
  # Couchbase存储桶名称
  COUCHBASE_BUCKET_NAME: ${COUCHBASE_BUCKET_NAME:-Embeddings}
  # Couchbase作用域名称
  COUCHBASE_SCOPE_NAME: ${COUCHBASE_SCOPE_NAME:-_default}
  # PGVector主机
  PGVECTOR_HOST: ${PGVECTOR_HOST:-pgvector}
  # PGVector端口
  PGVECTOR_PORT: ${PGVECTOR_PORT:-5432}
  # PGVector用户名
  PGVECTOR_USER: ${PGVECTOR_USER:-postgres}
  # PGVector密码
  PGVECTOR_PASSWORD: ${PGVECTOR_PASSWORD:-difyai123456}
  # PGVector数据库
  PGVECTOR_DATABASE: ${PGVECTOR_DATABASE:-dify}
  # PGVector最小连接数
  PGVECTOR_MIN_CONNECTION: ${PGVECTOR_MIN_CONNECTION:-1}
  # PGVector最大连接数
  PGVECTOR_MAX_CONNECTION: ${PGVECTOR_MAX_CONNECTION:-5}
  # PGVecto.rs主机
  PGVECTO_RS_HOST: ${PGVECTO_RS_HOST:-pgvecto-rs}
  # PGVecto.rs端口
  PGVECTO_RS_PORT: ${PGVECTO_RS_PORT:-5432}
  # PGVecto.rs用户名
  PGVECTO_RS_USER: ${PGVECTO_RS_USER:-postgres}
  # PGVecto.rs密码
  PGVECTO_RS_PASSWORD: ${PGVECTO_RS_PASSWORD:-difyai123456}
  # PGVecto.rs数据库
  PGVECTO_RS_DATABASE: ${PGVECTO_RS_DATABASE:-dify}
  # AnalyticDB密钥ID
  ANALYTICDB_KEY_ID: ${ANALYTICDB_KEY_ID:-your-ak}
  # AnalyticDB密钥
  ANALYTICDB_KEY_SECRET: ${ANALYTICDB_KEY_SECRET:-your-sk}
  # AnalyticDB区域ID
  ANALYTICDB_REGION_ID: ${ANALYTICDB_REGION_ID:-cn-hangzhou}
  # AnalyticDB实例ID
  ANALYTICDB_INSTANCE_ID: ${ANALYTICDB_INSTANCE_ID:-gp-ab123456}
  # AnalyticDB账户
  ANALYTICDB_ACCOUNT: ${ANALYTICDB_ACCOUNT:-testaccount}
  # AnalyticDB密码
  ANALYTICDB_PASSWORD: ${ANALYTICDB_PASSWORD:-testpassword}
  # AnalyticDB命名空间
  ANALYTICDB_NAMESPACE: ${ANALYTICDB_NAMESPACE:-dify}
  # AnalyticDB命名空间密码
  ANALYTICDB_NAMESPACE_PASSWORD: ${ANALYTICDB_NAMESPACE_PASSWORD:-difypassword}
  # AnalyticDB主机
  ANALYTICDB_HOST: ${ANALYTICDB_HOST:-gp-test.aliyuncs.com}
  # AnalyticDB端口
  ANALYTICDB_PORT: ${ANALYTICDB_PORT:-5432}
  # AnalyticDB最小连接数
  ANALYTICDB_MIN_CONNECTION: ${ANALYTICDB_MIN_CONNECTION:-1}
  # AnalyticDB最大连接数
  ANALYTICDB_MAX_CONNECTION: ${ANALYTICDB_MAX_CONNECTION:-5}
  # TiDB向量主机
  TIDB_VECTOR_HOST: ${TIDB_VECTOR_HOST:-tidb}
  # TiDB向量端口
  TIDB_VECTOR_PORT: ${TIDB_VECTOR_PORT:-4000}
  # TiDB向量用户名
  TIDB_VECTOR_USER: ${TIDB_VECTOR_USER:-}
  # TiDB向量密码
  TIDB_VECTOR_PASSWORD: ${TIDB_VECTOR_PASSWORD:-}
  # TiDB向量数据库
  TIDB_VECTOR_DATABASE: ${TIDB_VECTOR_DATABASE:-dify}
  # TiDB on Qdrant URL
  TIDB_ON_QDRANT_URL: ${TIDB_ON_QDRANT_URL:-http://127.0.0.1}
  # TiDB on Qdrant API密钥
  TIDB_ON_QDRANT_API_KEY: ${TIDB_ON_QDRANT_API_KEY:-dify}
  # TiDB on Qdrant客户端超时时间
  TIDB_ON_QDRANT_CLIENT_TIMEOUT: ${TIDB_ON_QDRANT_CLIENT_TIMEOUT:-20}
  # 是否启用TiDB on Qdrant GRPC
  TIDB_ON_QDRANT_GRPC_ENABLED: ${TIDB_ON_QDRANT_GRPC_ENABLED:-false}
  # TiDB on Qdrant GRPC端口
  TIDB_ON_QDRANT_GRPC_PORT: ${TIDB_ON_QDRANT_GRPC_PORT:-6334}
  # TiDB公钥
  TIDB_PUBLIC_KEY: ${TIDB_PUBLIC_KEY:-dify}
  # TiDB私钥
  TIDB_PRIVATE_KEY: ${TIDB_PRIVATE_KEY:-dify}
  # TiDB API URL
  TIDB_API_URL: ${TIDB_API_URL:-http://127.0.0.1}
  # TiDB IAM API URL
  TIDB_IAM_API_URL: ${TIDB_IAM_API_URL:-http://127.0.0.1}
  # TiDB区域
  TIDB_REGION: ${TIDB_REGION:-regions/aws-us-east-1}
  # TiDB项目ID
  TIDB_PROJECT_ID: ${TIDB_PROJECT_ID:-dify}
  # TiDB支出限制
  TIDB_SPEND_LIMIT: ${TIDB_SPEND_LIMIT:-100}
  # Chroma主机
  CHROMA_HOST: ${CHROMA_HOST:-127.0.0.1}
  # Chroma端口
  CHROMA_PORT: ${CHROMA_PORT:-8000}
  # Chroma租户
  CHROMA_TENANT: ${CHROMA_TENANT:-default_tenant}
  # Chroma数据库
  CHROMA_DATABASE: ${CHROMA_DATABASE:-default_database}
  # Chroma认证提供者
  CHROMA_AUTH_PROVIDER: ${CHROMA_AUTH_PROVIDER:-chromadb.auth.token_authn.TokenAuthClientProvider}
  # Chroma认证凭证
  CHROMA_AUTH_CREDENTIALS: ${CHROMA_AUTH_CREDENTIALS:-}
  # Oracle主机
  ORACLE_HOST: ${ORACLE_HOST:-oracle}
  # Oracle端口
  ORACLE_PORT: ${ORACLE_PORT:-1521}
  # Oracle用户名
  ORACLE_USER: ${ORACLE_USER:-dify}
  # Oracle密码
  ORACLE_PASSWORD: ${ORACLE_PASSWORD:-dify}
  # Oracle数据库
  ORACLE_DATABASE: ${ORACLE_DATABASE:-FREEPDB1}
  # Relyt主机
  RELYT_HOST: ${RELYT_HOST:-db}
  # Relyt端口
  RELYT_PORT: ${RELYT_PORT:-5432}
  # Relyt用户名
  RELYT_USER: ${RELYT_USER:-postgres}
  # Relyt密码
  RELYT_PASSWORD: ${RELYT_PASSWORD:-difyai123456}
  # Relyt数据库
  RELYT_DATABASE: ${RELYT_DATABASE:-postgres}
  # OpenSearch主机
  OPENSEARCH_HOST: ${OPENSEARCH_HOST:-opensearch}
  # OpenSearch端口
  OPENSEARCH_PORT: ${OPENSEARCH_PORT:-9200}
  # OpenSearch用户名
  OPENSEARCH_USER: ${OPENSEARCH_USER:-admin}
  # OpenSearch密码
  OPENSEARCH_PASSWORD: ${OPENSEARCH_PASSWORD:-admin}
  # 是否启用OpenSearch安全
  OPENSEARCH_SECURE: ${OPENSEARCH_SECURE:-true}
  # 腾讯向量数据库URL
  TENCENT_VECTOR_DB_URL: ${TENCENT_VECTOR_DB_URL:-http://127.0.0.1}
  # 腾讯向量数据库API密钥
  TENCENT_VECTOR_DB_API_KEY: ${TENCENT_VECTOR_DB_API_KEY:-dify}
  # 腾讯向量数据库超时时间
  TENCENT_VECTOR_DB_TIMEOUT: ${TENCENT_VECTOR_DB_TIMEOUT:-30}
  # 腾讯向量数据库用户名
  TENCENT_VECTOR_DB_USERNAME: ${TENCENT_VECTOR_DB_USERNAME:-dify}
  # 腾讯向量数据库数据库名
  TENCENT_VECTOR_DB_DATABASE: ${TENCENT_VECTOR_DB_DATABASE:-dify}
  # 腾讯向量数据库分片数
  TENCENT_VECTOR_DB_SHARD: ${TENCENT_VECTOR_DB_SHARD:-1}
  # 腾讯向量数据库副本数
  TENCENT_VECTOR_DB_REPLICAS: ${TENCENT_VECTOR_DB_REPLICAS:-2}
  # Elasticsearch主机
  ELASTICSEARCH_HOST: ${ELASTICSEARCH_HOST:-0.0.0.0}
  # Elasticsearch端口
  ELASTICSEARCH_PORT: ${ELASTICSEARCH_PORT:-9200}
  # Elasticsearch用户名
  ELASTICSEARCH_USERNAME: ${ELASTICSEARCH_USERNAME:-elastic}
  # Elasticsearch密码
  ELASTICSEARCH_PASSWORD: ${ELASTICSEARCH_PASSWORD:-elastic}
  # Kibana端口
  KIBANA_PORT: ${KIBANA_PORT:-5601}
  # 百度向量数据库端点
  BAIDU_VECTOR_DB_ENDPOINT: ${BAIDU_VECTOR_DB_ENDPOINT:-http://127.0.0.1:5287}
  # 百度向量数据库连接超时时间(毫秒)
  BAIDU_VECTOR_DB_CONNECTION_TIMEOUT_MS: ${BAIDU_VECTOR_DB_CONNECTION_TIMEOUT_MS:-30000}
  # 百度向量数据库账户
  BAIDU_VECTOR_DB_ACCOUNT: ${BAIDU_VECTOR_DB_ACCOUNT:-root}
  # 百度向量数据库API密钥
  BAIDU_VECTOR_DB_API_KEY: ${BAIDU_VECTOR_DB_API_KEY:-dify}
  # 百度向量数据库数据库名
  BAIDU_VECTOR_DB_DATABASE: ${BAIDU_VECTOR_DB_DATABASE:-dify}
  # 百度向量数据库分片数
  BAIDU_VECTOR_DB_SHARD: ${BAIDU_VECTOR_DB_SHARD:-1}
  # 百度向量数据库副本数
  BAIDU_VECTOR_DB_REPLICAS: ${BAIDU_VECTOR_DB_REPLICAS:-3}
  # VikingDB访问密钥
  VIKINGDB_ACCESS_KEY: ${VIKINGDB_ACCESS_KEY:-your-ak}
  # VikingDB密钥
  VIKINGDB_SECRET_KEY: ${VIKINGDB_SECRET_KEY:-your-sk}
  # VikingDB地区
  VIKINGDB_REGION: ${VIKINGDB_REGION:-cn-shanghai}
  # VikingDB主机地址
  VIKINGDB_HOST: ${VIKINGDB_HOST:-api-vikingdb.xxx.volces.com}
  # VikingDB协议
  VIKINGDB_SCHEMA: ${VIKINGDB_SCHEMA:-http}
  # VikingDB连接超时时间
  VIKINGDB_CONNECTION_TIMEOUT: ${VIKINGDB_CONNECTION_TIMEOUT:-30}
  # VikingDB套接字超时时间
  VIKINGDB_SOCKET_TIMEOUT: ${VIKINGDB_SOCKET_TIMEOUT:-30}
  # Lindorm数据库URL
  LINDORM_URL: ${LINDORM_URL:-http://lindorm:30070}
  # Lindorm用户名
  LINDORM_USERNAME: ${LINDORM_USERNAME:-lindorm}
  # Lindorm密码
  LINDORM_PASSWORD: ${LINDORM_PASSWORD:-lindorm}
  # OceanBase向量数据库主机
  OCEANBASE_VECTOR_HOST: ${OCEANBASE_VECTOR_HOST:-oceanbase}
  # OceanBase向量数据库端口
  OCEANBASE_VECTOR_PORT: ${OCEANBASE_VECTOR_PORT:-2881}
  # OceanBase向量数据库用户
  OCEANBASE_VECTOR_USER: ${OCEANBASE_VECTOR_USER:-root@test}
  # OceanBase向量数据库密码
  OCEANBASE_VECTOR_PASSWORD: ${OCEANBASE_VECTOR_PASSWORD:-difyai123456}
  # OceanBase向量数据库名
  OCEANBASE_VECTOR_DATABASE: ${OCEANBASE_VECTOR_DATABASE:-test}
  # OceanBase集群名称
  OCEANBASE_CLUSTER_NAME: ${OCEANBASE_CLUSTER_NAME:-difyai}
  # OceanBase内存限制
  OCEANBASE_MEMORY_LIMIT: ${OCEANBASE_MEMORY_LIMIT:-6G}
  # Upstash向量数据库URL
  UPSTASH_VECTOR_URL: ${UPSTASH_VECTOR_URL:-https://xxx-vector.upstash.io}
  # Upstash向量数据库令牌
  UPSTASH_VECTOR_TOKEN: ${UPSTASH_VECTOR_TOKEN:-dify}
  # 上传文件大小限制(MB)
  UPLOAD_FILE_SIZE_LIMIT: ${UPLOAD_FILE_SIZE_LIMIT:-15}
  # 上传文件批次限制
  UPLOAD_FILE_BATCH_LIMIT: ${UPLOAD_FILE_BATCH_LIMIT:-5}
  # ETL类型
  ETL_TYPE: ${ETL_TYPE:-dify}
  # 非结构化API URL
  UNSTRUCTURED_API_URL: ${UNSTRUCTURED_API_URL:-}
  # 非结构化API密钥
  UNSTRUCTURED_API_KEY: ${UNSTRUCTURED_API_KEY:-}
  # 是否禁用Scarf分析
  SCARF_NO_ANALYTICS: ${SCARF_NO_ANALYTICS:-true}
  # 提示生成最大令牌数
  PROMPT_GENERATION_MAX_TOKENS: ${PROMPT_GENERATION_MAX_TOKENS:-512}
  # 代码生成最大令牌数
  CODE_GENERATION_MAX_TOKENS: ${CODE_GENERATION_MAX_TOKENS:-1024}
  # 多模态发送格式
  MULTIMODAL_SEND_FORMAT: ${MULTIMODAL_SEND_FORMAT:-base64}
  # 上传图片文件大小限制(MB)
  UPLOAD_IMAGE_FILE_SIZE_LIMIT: ${UPLOAD_IMAGE_FILE_SIZE_LIMIT:-10}
  # 上传视频文件大小限制(MB)
  UPLOAD_VIDEO_FILE_SIZE_LIMIT: ${UPLOAD_VIDEO_FILE_SIZE_LIMIT:-100}
  # 上传音频文件大小限制(MB)
  UPLOAD_AUDIO_FILE_SIZE_LIMIT: ${UPLOAD_AUDIO_FILE_SIZE_LIMIT:-50}
  # Sentry DSN
  SENTRY_DSN: ${SENTRY_DSN:-}
  # API Sentry DSN
  API_SENTRY_DSN: ${API_SENTRY_DSN:-}
  # API Sentry追踪采样率
  API_SENTRY_TRACES_SAMPLE_RATE: ${API_SENTRY_TRACES_SAMPLE_RATE:-1.0}
  # API Sentry性能分析采样率
  API_SENTRY_PROFILES_SAMPLE_RATE: ${API_SENTRY_PROFILES_SAMPLE_RATE:-1.0}
  # Web Sentry DSN
  WEB_SENTRY_DSN: ${WEB_SENTRY_DSN:-}
  # Notion集成类型
  NOTION_INTEGRATION_TYPE: ${NOTION_INTEGRATION_TYPE:-public}
  # Notion客户端密钥
  NOTION_CLIENT_SECRET: ${NOTION_CLIENT_SECRET:-}
  # Notion客户端ID
  NOTION_CLIENT_ID: ${NOTION_CLIENT_ID:-}
  # Notion内部密钥
  NOTION_INTERNAL_SECRET: ${NOTION_INTERNAL_SECRET:-}
  # 邮件类型
  MAIL_TYPE: ${MAIL_TYPE:-resend}
  # 默认发件人邮箱
  MAIL_DEFAULT_SEND_FROM: ${MAIL_DEFAULT_SEND_FROM:-}
  # Resend API URL
  RESEND_API_URL: ${RESEND_API_URL:-https://api.resend.com}
  # Resend API密钥
  RESEND_API_KEY: ${RESEND_API_KEY:-your-resend-api-key}
  # SMTP服务器
  SMTP_SERVER: ${SMTP_SERVER:-}
  # SMTP端口
  SMTP_PORT: ${SMTP_PORT:-465}
  # SMTP用户名
  SMTP_USERNAME: ${SMTP_USERNAME:-}
  # SMTP密码
  SMTP_PASSWORD: ${SMTP_PASSWORD:-}
  # 是否使用SMTP TLS
  SMTP_USE_TLS: ${SMTP_USE_TLS:-true}
  # 是否使用SMTP机会性TLS
  SMTP_OPPORTUNISTIC_TLS: ${SMTP_OPPORTUNISTIC_TLS:-false}
  # 索引最大分段令牌长度
  INDEXING_MAX_SEGMENTATION_TOKENS_LENGTH: ${INDEXING_MAX_SEGMENTATION_TOKENS_LENGTH:-4000}
  # 邀请过期小时数
  INVITE_EXPIRY_HOURS: ${INVITE_EXPIRY_HOURS:-72}
  # 重置密码令牌过期分钟数
  RESET_PASSWORD_TOKEN_EXPIRY_MINUTES: ${RESET_PASSWORD_TOKEN_EXPIRY_MINUTES:-5}
  # 代码执行端点
  CODE_EXECUTION_ENDPOINT: ${CODE_EXECUTION_ENDPOINT:-http://sandbox:8194}
  # 代码执行API密钥
  CODE_EXECUTION_API_KEY: ${CODE_EXECUTION_API_KEY:-dify-sandbox}
  # 代码最大数值
  CODE_MAX_NUMBER: ${CODE_MAX_NUMBER:-9223372036854775807}
  # 代码最小数值
  CODE_MIN_NUMBER: ${CODE_MIN_NUMBER:--9223372036854775808}
  # 代码最大深度
  CODE_MAX_DEPTH: ${CODE_MAX_DEPTH:-5}
  # 代码最大精度
  CODE_MAX_PRECISION: ${CODE_MAX_PRECISION:-20}
  # 代码最大字符串长度
  CODE_MAX_STRING_LENGTH: ${CODE_MAX_STRING_LENGTH:-80000}
  # 代码最大字符串数组长度
  CODE_MAX_STRING_ARRAY_LENGTH: ${CODE_MAX_STRING_ARRAY_LENGTH:-30}
  # 代码最大对象数组长度
  CODE_MAX_OBJECT_ARRAY_LENGTH: ${CODE_MAX_OBJECT_ARRAY_LENGTH:-30}
  # 代码最大数值数组长度
  CODE_MAX_NUMBER_ARRAY_LENGTH: ${CODE_MAX_NUMBER_ARRAY_LENGTH:-1000}
  # 代码执行连接超时时间
  CODE_EXECUTION_CONNECT_TIMEOUT: ${CODE_EXECUTION_CONNECT_TIMEOUT:-10}
  # 代码执行读取超时时间
  CODE_EXECUTION_READ_TIMEOUT: ${CODE_EXECUTION_READ_TIMEOUT:-60}
  # 代码执行写入超时时间
  CODE_EXECUTION_WRITE_TIMEOUT: ${CODE_EXECUTION_WRITE_TIMEOUT:-10}
  # 模板转换最大长度
  TEMPLATE_TRANSFORM_MAX_LENGTH: ${TEMPLATE_TRANSFORM_MAX_LENGTH:-80000}
  # 工作流最大执行步骤数
  WORKFLOW_MAX_EXECUTION_STEPS: ${WORKFLOW_MAX_EXECUTION_STEPS:-500}
  # 工作流最大执行时间(秒)
  WORKFLOW_MAX_EXECUTION_TIME: ${WORKFLOW_MAX_EXECUTION_TIME:-1200}
  # 工作流调用最大深度
  WORKFLOW_CALL_MAX_DEPTH: ${WORKFLOW_CALL_MAX_DEPTH:-5}
  # 最大变量大小(字节)
  MAX_VARIABLE_SIZE: ${MAX_VARIABLE_SIZE:-204800}
  # 工作流并行深度限制
  WORKFLOW_PARALLEL_DEPTH_LIMIT: ${WORKFLOW_PARALLEL_DEPTH_LIMIT:-3}
  # 工作流文件上传限制
  WORKFLOW_FILE_UPLOAD_LIMIT: ${WORKFLOW_FILE_UPLOAD_LIMIT:-10}
  # HTTP请求节点最大二进制大小(字节)
  HTTP_REQUEST_NODE_MAX_BINARY_SIZE: ${HTTP_REQUEST_NODE_MAX_BINARY_SIZE:-10485760}
  # HTTP请求节点最大文本大小(字节)
  HTTP_REQUEST_NODE_MAX_TEXT_SIZE: ${HTTP_REQUEST_NODE_MAX_TEXT_SIZE:-1048576}
  # SSRF代理HTTP URL
  SSRF_PROXY_HTTP_URL: ${SSRF_PROXY_HTTP_URL:-http://ssrf_proxy:3128}
  # SSRF代理HTTPS URL
  SSRF_PROXY_HTTPS_URL: ${SSRF_PROXY_HTTPS_URL:-http://ssrf_proxy:3128}
  # 文本生成超时时间(毫秒)
  TEXT_GENERATION_TIMEOUT_MS: ${TEXT_GENERATION_TIMEOUT_MS:-60000}
  # PostgreSQL用户名
  PGUSER: ${PGUSER:-${DB_USERNAME}}
  # PostgreSQL密码
  POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-${DB_PASSWORD}}
  # PostgreSQL数据库名
  POSTGRES_DB: ${POSTGRES_DB:-${DB_DATABASE}}
  # PostgreSQL数据目录
  PGDATA: ${PGDATA:-/var/lib/postgresql/data/pgdata}
  # 沙箱API密钥
  SANDBOX_API_KEY: ${SANDBOX_API_KEY:-dify-sandbox}
  # 沙箱Gin模式
  SANDBOX_GIN_MODE: ${SANDBOX_GIN_MODE:-release}
  # 沙箱工作超时时间
  SANDBOX_WORKER_TIMEOUT: ${SANDBOX_WORKER_TIMEOUT:-15}
  # 是否启用沙箱网络
  SANDBOX_ENABLE_NETWORK: ${SANDBOX_ENABLE_NETWORK:-true}
  # 沙箱HTTP代理
  SANDBOX_HTTP_PROXY: ${SANDBOX_HTTP_PROXY:-http://ssrf_proxy:3128}
  # 沙箱HTTPS代理
  SANDBOX_HTTPS_PROXY: ${SANDBOX_HTTPS_PROXY:-http://ssrf_proxy:3128}
  # 沙箱端口
  SANDBOX_PORT: ${SANDBOX_PORT:-8194}
  # Weaviate持久化数据路径
  WEAVIATE_PERSISTENCE_DATA_PATH: ${WEAVIATE_PERSISTENCE_DATA_PATH:-/var/lib/weaviate}
  # Weaviate查询默认限制
  WEAVIATE_QUERY_DEFAULTS_LIMIT: ${WEAVIATE_QUERY_DEFAULTS_LIMIT:-25}
  # 是否启用Weaviate匿名访问
  WEAVIATE_AUTHENTICATION_ANONYMOUS_ACCESS_ENABLED: ${WEAVIATE_AUTHENTICATION_ANONYMOUS_ACCESS_ENABLED:-true}
  # Weaviate默认向量化模块
  WEAVIATE_DEFAULT_VECTORIZER_MODULE: ${WEAVIATE_DEFAULT_VECTORIZER_MODULE:-none}
  # Weaviate集群主机名
  WEAVIATE_CLUSTER_HOSTNAME: ${WEAVIATE_CLUSTER_HOSTNAME:-node1}
  # 是否启用Weaviate API密钥认证
  WEAVIATE_AUTHENTICATION_APIKEY_ENABLED: ${WEAVIATE_AUTHENTICATION_APIKEY_ENABLED:-true}
  # Weaviate允许的API密钥
  WEAVIATE_AUTHENTICATION_APIKEY_ALLOWED_KEYS: ${WEAVIATE_AUTHENTICATION_APIKEY_ALLOWED_KEYS:-WVF5YThaHlkYwhGUSmCRgsX3tD5ngdN8pkih}
  # Weaviate API密钥用户
  WEAVIATE_AUTHENTICATION_APIKEY_USERS: ${WEAVIATE_AUTHENTICATION_APIKEY_USERS:-hello@dify.ai}
  # 是否启用Weaviate管理员列表
  WEAVIATE_AUTHORIZATION_ADMINLIST_ENABLED: ${WEAVIATE_AUTHORIZATION_ADMINLIST_ENABLED:-true}
  # Weaviate管理员列表用户
  WEAVIATE_AUTHORIZATION_ADMINLIST_USERS: ${WEAVIATE_AUTHORIZATION_ADMINLIST_USERS:-hello@dify.ai}
  # Chroma服务器认证凭证
  CHROMA_SERVER_AUTHN_CREDENTIALS: ${CHROMA_SERVER_AUTHN_CREDENTIALS:-difyai123456}
  # Chroma服务器认证提供者
  CHROMA_SERVER_AUTHN_PROVIDER: ${CHROMA_SERVER_AUTHN_PROVIDER:-chromadb.auth.token_authn.TokenAuthenticationServerProvider}
  # 是否启用Chroma持久化
  CHROMA_IS_PERSISTENT: ${CHROMA_IS_PERSISTENT:-TRUE}
  # Oracle数据库密码
  ORACLE_PWD: ${ORACLE_PWD:-Dify123456}
  # Oracle字符集
  ORACLE_CHARACTERSET: ${ORACLE_CHARACTERSET:-AL32UTF8}
  # ETCD自动压缩模式
  ETCD_AUTO_COMPACTION_MODE: ${ETCD_AUTO_COMPACTION_MODE:-revision}
  # ETCD自动压缩保留数
  ETCD_AUTO_COMPACTION_RETENTION: ${ETCD_AUTO_COMPACTION_RETENTION:-1000}
  # ETCD配额后端字节数
  ETCD_QUOTA_BACKEND_BYTES: ${ETCD_QUOTA_BACKEND_BYTES:-4294967296}
  # ETCD快照计数
  ETCD_SNAPSHOT_COUNT: ${ETCD_SNAPSHOT_COUNT:-50000}
  # MinIO访问密钥
  MINIO_ACCESS_KEY: ${MINIO_ACCESS_KEY:-minioadmin}
  # MinIO密钥
  MINIO_SECRET_KEY: ${MINIO_SECRET_KEY:-minioadmin}
  # ETCD端点
  ETCD_ENDPOINTS: ${ETCD_ENDPOINTS:-etcd:2379}
  # MinIO地址
  MINIO_ADDRESS: ${MINIO_ADDRESS:-minio:9000}
  # 是否启用Milvus授权
  MILVUS_AUTHORIZATION_ENABLED: ${MILVUS_AUTHORIZATION_ENABLED:-true}
  # PGVector PostgreSQL用户名
  PGVECTOR_PGUSER: ${PGVECTOR_PGUSER:-postgres}
  # PGVector PostgreSQL密码
  PGVECTOR_POSTGRES_PASSWORD: ${PGVECTOR_POSTGRES_PASSWORD:-difyai123456}
  # PGVector PostgreSQL数据库名
  PGVECTOR_POSTGRES_DB: ${PGVECTOR_POSTGRES_DB:-dify}
  # PGVector PostgreSQL数据目录
  PGVECTOR_PGDATA: ${PGVECTOR_PGDATA:-/var/lib/postgresql/data/pgdata}
  # OpenSearch发现类型
  OPENSEARCH_DISCOVERY_TYPE: ${OPENSEARCH_DISCOVERY_TYPE:-single-node}
  # 是否启用OpenSearch内存锁定
  OPENSEARCH_BOOTSTRAP_MEMORY_LOCK: ${OPENSEARCH_BOOTSTRAP_MEMORY_LOCK:-true}
  # OpenSearch Java最小内存
  OPENSEARCH_JAVA_OPTS_MIN: ${OPENSEARCH_JAVA_OPTS_MIN:-512m}
  # OpenSearch Java最大内存
  OPENSEARCH_JAVA_OPTS_MAX: ${OPENSEARCH_JAVA_OPTS_MAX:-1024m}
  # OpenSearch初始管理员密码
  OPENSEARCH_INITIAL_ADMIN_PASSWORD: ${OPENSEARCH_INITIAL_ADMIN_PASSWORD:-Qazwsxedc!@#123}
  # OpenSearch内存锁定软限制
  OPENSEARCH_MEMLOCK_SOFT: ${OPENSEARCH_MEMLOCK_SOFT:--1}
  # OpenSearch内存锁定硬限制
  OPENSEARCH_MEMLOCK_HARD: ${OPENSEARCH_MEMLOCK_HARD:--1}
  # OpenSearch文件描述符软限制
  OPENSEARCH_NOFILE_SOFT: ${OPENSEARCH_NOFILE_SOFT:-65536}
  # OpenSearch文件描述符硬限制
  OPENSEARCH_NOFILE_HARD: ${OPENSEARCH_NOFILE_HARD:-65536}
  # Nginx服务器名称
  NGINX_SERVER_NAME: ${NGINX_SERVER_NAME:-_}
  # 是否启用Nginx HTTPS
  NGINX_HTTPS_ENABLED: ${NGINX_HTTPS_ENABLED:-false}
  # Nginx HTTP端口
  NGINX_PORT: ${NGINX_PORT:-80}
  # Nginx HTTPS端口
  NGINX_SSL_PORT: ${NGINX_SSL_PORT:-443}
  # Nginx SSL证书文件名
  NGINX_SSL_CERT_FILENAME: ${NGINX_SSL_CERT_FILENAME:-dify.crt}
  # Nginx SSL证书密钥文件名
  NGINX_SSL_CERT_KEY_FILENAME: ${NGINX_SSL_CERT_KEY_FILENAME:-dify.key}
  # Nginx SSL协议
  NGINX_SSL_PROTOCOLS: ${NGINX_SSL_PROTOCOLS:-TLSv1.1 TLSv1.2 TLSv1.3}
  # Nginx工作进程数
  NGINX_WORKER_PROCESSES: ${NGINX_WORKER_PROCESSES:-auto}
  # Nginx客户端最大请求体大小
  NGINX_CLIENT_MAX_BODY_SIZE: ${NGINX_CLIENT_MAX_BODY_SIZE:-15M}
  # Nginx保持连接超时时间
  NGINX_KEEPALIVE_TIMEOUT: ${NGINX_KEEPALIVE_TIMEOUT:-65}
  # Nginx代理读取超时时间
  NGINX_PROXY_READ_TIMEOUT: ${NGINX_PROXY_READ_TIMEOUT:-3600s}
  # Nginx代理发送超时时间
  NGINX_PROXY_SEND_TIMEOUT: ${NGINX_PROXY_SEND_TIMEOUT:-3600s}
  # 是否启用Nginx Certbot挑战
  NGINX_ENABLE_CERTBOT_CHALLENGE: ${NGINX_ENABLE_CERTBOT_CHALLENGE:-false}
  # Certbot邮箱
  CERTBOT_EMAIL: ${CERTBOT_EMAIL:-your_email@example.com}
  # Certbot域名
  CERTBOT_DOMAIN: ${CERTBOT_DOMAIN:-your_domain.com}
  # Certbot选项
  CERTBOT_OPTIONS: ${CERTBOT_OPTIONS:-}
  # SSRF HTTP端口
  SSRF_HTTP_PORT: ${SSRF_HTTP_PORT:-3128}
  # SSRF核心转储目录
  SSRF_COREDUMP_DIR: ${SSRF_COREDUMP_DIR:-/var/spool/squid}
  # SSRF反向代理端口
  SSRF_REVERSE_PROXY_PORT: ${SSRF_REVERSE_PROXY_PORT:-8194}
  # SSRF沙箱主机
  SSRF_SANDBOX_HOST: ${SSRF_SANDBOX_HOST:-sandbox}
  # Docker Compose配置文件
  COMPOSE_PROFILES: ${COMPOSE_PROFILES:-${VECTOR_STORE:-weaviate}}
  # 暴露Nginx HTTP端口
  EXPOSE_NGINX_PORT: ${EXPOSE_NGINX_PORT:-80}
  # 暴露Nginx HTTPS端口
  EXPOSE_NGINX_SSL_PORT: ${EXPOSE_NGINX_SSL_PORT:-443}
  # 位置工具固定项
  POSITION_TOOL_PINS: ${POSITION_TOOL_PINS:-}
  # 位置工具包含项
  POSITION_TOOL_INCLUDES: ${POSITION_TOOL_INCLUDES:-}
  # 位置工具排除项
  POSITION_TOOL_EXCLUDES: ${POSITION_TOOL_EXCLUDES:-}
  # 位置提供者固定项
  POSITION_PROVIDER_PINS: ${POSITION_PROVIDER_PINS:-}
  # 位置提供者包含项
  POSITION_PROVIDER_INCLUDES: ${POSITION_PROVIDER_INCLUDES:-}
  # 位置提供者排除项
  POSITION_PROVIDER_EXCLUDES: ${POSITION_PROVIDER_EXCLUDES:-}
  # CSP白名单
  CSP_WHITELIST: ${CSP_WHITELIST:-}
  # 是否启用创建TiDB服务作业
  CREATE_TIDB_SERVICE_JOB_ENABLED: ${CREATE_TIDB_SERVICE_JOB_ENABLED:-false}
  # 最大提交次数
  MAX_SUBMIT_COUNT: ${MAX_SUBMIT_COUNT:-100}

services:
  # API service
  api:
    image: langgenius/dify-api:0.14.1
    restart: always
    environment:
      # Use the shared environment variables.
      <<: *shared-api-worker-env
      # Startup mode, 'api' starts the API server.
      MODE: api
      SENTRY_DSN: ${API_SENTRY_DSN:-}
      SENTRY_TRACES_SAMPLE_RATE: ${API_SENTRY_TRACES_SAMPLE_RATE:-1.0}
      SENTRY_PROFILES_SAMPLE_RATE: ${API_SENTRY_PROFILES_SAMPLE_RATE:-1.0}
    depends_on:
      - db
      - redis
    volumes:
      # Mount the storage directory to the container, for storing user files.
      - ./volumes/app/storage:/app/api/storage
    networks:
      - ssrf_proxy_network
      - default

  # worker service
  # The Celery worker for processing the queue.
  worker:
    image: langgenius/dify-api:0.14.1
    restart: always
    environment:
      # Use the shared environment variables.
      <<: *shared-api-worker-env
      # Startup mode, 'worker' starts the Celery worker for processing the queue.
      MODE: worker
      SENTRY_DSN: ${API_SENTRY_DSN:-}
      SENTRY_TRACES_SAMPLE_RATE: ${API_SENTRY_TRACES_SAMPLE_RATE:-1.0}
      SENTRY_PROFILES_SAMPLE_RATE: ${API_SENTRY_PROFILES_SAMPLE_RATE:-1.0}
    depends_on:
      - db
      - redis
    volumes:
      # Mount the storage directory to the container, for storing user files.
      - ./volumes/app/storage:/app/api/storage
    networks:
      - ssrf_proxy_network
      - default

  # Frontend web application.
  web:
    image: langgenius/dify-web:0.14.1
    restart: always
    environment:
      CONSOLE_API_URL: ${CONSOLE_API_URL:-}
      APP_API_URL: ${APP_API_URL:-}
      SENTRY_DSN: ${WEB_SENTRY_DSN:-}
      NEXT_TELEMETRY_DISABLED: ${NEXT_TELEMETRY_DISABLED:-0}
      TEXT_GENERATION_TIMEOUT_MS: ${TEXT_GENERATION_TIMEOUT_MS:-60000}
      CSP_WHITELIST: ${CSP_WHITELIST:-}

  # The postgres database.
  db:
    image: postgres:15-alpine
    restart: always
    environment:
      PGUSER: ${PGUSER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-difyai123456}
      POSTGRES_DB: ${POSTGRES_DB:-dify}
      PGDATA: ${PGDATA:-/var/lib/postgresql/data/pgdata}
    command: >
      postgres -c 'max_connections=${POSTGRES_MAX_CONNECTIONS:-100}'
               -c 'shared_buffers=${POSTGRES_SHARED_BUFFERS:-128MB}'
               -c 'work_mem=${POSTGRES_WORK_MEM:-4MB}'
               -c 'maintenance_work_mem=${POSTGRES_MAINTENANCE_WORK_MEM:-64MB}'
               -c 'effective_cache_size=${POSTGRES_EFFECTIVE_CACHE_SIZE:-4096MB}'
    volumes:
      - ./volumes/db/data:/var/lib/postgresql/data
    healthcheck:
      test: ['CMD', 'pg_isready']
      interval: 1s
      timeout: 3s
      retries: 30

  # The redis cache.
  redis:
    image: redis:6-alpine
    restart: always
    environment:
      REDISCLI_AUTH: ${REDIS_PASSWORD:-difyai123456}
    volumes:
      # Mount the redis data directory to the container.
      - ./volumes/redis/data:/data
    # Set the redis password when startup redis server.
    command: redis-server --requirepass ${REDIS_PASSWORD:-difyai123456}
    healthcheck:
      test: ['CMD', 'redis-cli', 'ping']

  # The DifySandbox
  sandbox:
    image: langgenius/dify-sandbox:0.2.10
    restart: always
    environment:
      # The DifySandbox configurations
      # Make sure you are changing this key for your deployment with a strong key.
      # You can generate a strong key using `openssl rand -base64 42`.
      API_KEY: ${SANDBOX_API_KEY:-dify-sandbox}
      GIN_MODE: ${SANDBOX_GIN_MODE:-release}
      WORKER_TIMEOUT: ${SANDBOX_WORKER_TIMEOUT:-15}
      ENABLE_NETWORK: ${SANDBOX_ENABLE_NETWORK:-true}
      HTTP_PROXY: ${SANDBOX_HTTP_PROXY:-http://ssrf_proxy:3128}
      HTTPS_PROXY: ${SANDBOX_HTTPS_PROXY:-http://ssrf_proxy:3128}
      SANDBOX_PORT: ${SANDBOX_PORT:-8194}
    volumes:
      - ./volumes/sandbox/dependencies:/dependencies
    healthcheck:
      test: ['CMD', 'curl', '-f', 'http://localhost:8194/health']
    networks:
      - ssrf_proxy_network

  # ssrf_proxy server
  # for more information, please refer to
  # https://docs.dify.ai/learn-more/faq/install-faq#id-18.-why-is-ssrf_proxy-needed
  ssrf_proxy:
    image: ubuntu/squid:latest
    restart: always
    volumes:
      - ./ssrf_proxy/squid.conf.template:/etc/squid/squid.conf.template
      - ./ssrf_proxy/docker-entrypoint.sh:/docker-entrypoint-mount.sh
    entrypoint:
      [
        'sh',
        '-c',
        "cp /docker-entrypoint-mount.sh /docker-entrypoint.sh && sed -i 's/\r$$//' /docker-entrypoint.sh && chmod +x /docker-entrypoint.sh && /docker-entrypoint.sh",
      ]
    environment:
      # pls clearly modify the squid env vars to fit your network environment.
      HTTP_PORT: ${SSRF_HTTP_PORT:-3128}
      COREDUMP_DIR: ${SSRF_COREDUMP_DIR:-/var/spool/squid}
      REVERSE_PROXY_PORT: ${SSRF_REVERSE_PROXY_PORT:-8194}
      SANDBOX_HOST: ${SSRF_SANDBOX_HOST:-sandbox}
      SANDBOX_PORT: ${SANDBOX_PORT:-8194}
    networks:
      - ssrf_proxy_network
      - default

  # Certbot service
  # use `docker-compose --profile certbot up` to start the certbot service.
  certbot:
    image: certbot/certbot
    profiles:
      - certbot
    volumes:
      - ./volumes/certbot/conf:/etc/letsencrypt
      - ./volumes/certbot/www:/var/www/html
      - ./volumes/certbot/logs:/var/log/letsencrypt
      - ./volumes/certbot/conf/live:/etc/letsencrypt/live
      - ./certbot/update-cert.template.txt:/update-cert.template.txt
      - ./certbot/docker-entrypoint.sh:/docker-entrypoint.sh
    environment:
      - CERTBOT_EMAIL=${CERTBOT_EMAIL}
      - CERTBOT_DOMAIN=${CERTBOT_DOMAIN}
      - CERTBOT_OPTIONS=${CERTBOT_OPTIONS:-}
    entrypoint: ['/docker-entrypoint.sh']
    command: ['tail', '-f', '/dev/null']

  # The nginx reverse proxy.
  # used for reverse proxying the API service and Web service.
  nginx:
    image: nginx:latest
    restart: always
    volumes:
      - ./nginx/nginx.conf.template:/etc/nginx/nginx.conf.template
      - ./nginx/proxy.conf.template:/etc/nginx/proxy.conf.template
      - ./nginx/https.conf.template:/etc/nginx/https.conf.template
      - ./nginx/conf.d:/etc/nginx/conf.d
      - ./nginx/docker-entrypoint.sh:/docker-entrypoint-mount.sh
      - ./nginx/ssl:/etc/ssl # cert dir (legacy)
      - ./volumes/certbot/conf/live:/etc/letsencrypt/live # cert dir (with certbot container)
      - ./volumes/certbot/conf:/etc/letsencrypt
      - ./volumes/certbot/www:/var/www/html
    entrypoint:
      [
        'sh',
        '-c',
        "cp /docker-entrypoint-mount.sh /docker-entrypoint.sh && sed -i 's/\r$$//' /docker-entrypoint.sh && chmod +x /docker-entrypoint.sh && /docker-entrypoint.sh",
      ]
    environment:
      NGINX_SERVER_NAME: ${NGINX_SERVER_NAME:-_}
      NGINX_HTTPS_ENABLED: ${NGINX_HTTPS_ENABLED:-false}
      NGINX_SSL_PORT: ${NGINX_SSL_PORT:-443}
      NGINX_PORT: ${NGINX_PORT:-80}
      # You're required to add your own SSL certificates/keys to the `./nginx/ssl` directory
      # and modify the env vars below in .env if HTTPS_ENABLED is true.
      NGINX_SSL_CERT_FILENAME: ${NGINX_SSL_CERT_FILENAME:-dify.crt}
      NGINX_SSL_CERT_KEY_FILENAME: ${NGINX_SSL_CERT_KEY_FILENAME:-dify.key}
      NGINX_SSL_PROTOCOLS: ${NGINX_SSL_PROTOCOLS:-TLSv1.1 TLSv1.2 TLSv1.3}
      NGINX_WORKER_PROCESSES: ${NGINX_WORKER_PROCESSES:-auto}
      NGINX_CLIENT_MAX_BODY_SIZE: ${NGINX_CLIENT_MAX_BODY_SIZE:-15M}
      NGINX_KEEPALIVE_TIMEOUT: ${NGINX_KEEPALIVE_TIMEOUT:-65}
      NGINX_PROXY_READ_TIMEOUT: ${NGINX_PROXY_READ_TIMEOUT:-3600s}
      NGINX_PROXY_SEND_TIMEOUT: ${NGINX_PROXY_SEND_TIMEOUT:-3600s}
      NGINX_ENABLE_CERTBOT_CHALLENGE: ${NGINX_ENABLE_CERTBOT_CHALLENGE:-false}
      CERTBOT_DOMAIN: ${CERTBOT_DOMAIN:-}
    depends_on:
      - api
      - web
    ports:
      - '${EXPOSE_NGINX_PORT:-80}:${NGINX_PORT:-80}'
      - '${EXPOSE_NGINX_SSL_PORT:-443}:${NGINX_SSL_PORT:-443}'

  # The TiDB vector store.
  # For production use, please refer to https://github.com/pingcap/tidb-docker-compose
  tidb:
    image: pingcap/tidb:v8.4.0
    profiles:
      - tidb
    command:
      - --store=unistore
    restart: always

  # The Weaviate vector store.
  weaviate:
    image: semitechnologies/weaviate:1.19.0
    profiles:
      - ''
      - weaviate
    restart: always
    volumes:
      # Mount the Weaviate data directory to the con tainer.
      - ./volumes/weaviate:/var/lib/weaviate
    environment:
      # The Weaviate configurations
      # You can refer to the [Weaviate](https://weaviate.io/developers/weaviate/config-refs/env-vars) documentation for more information.
      PERSISTENCE_DATA_PATH: ${WEAVIATE_PERSISTENCE_DATA_PATH:-/var/lib/weaviate}
      QUERY_DEFAULTS_LIMIT: ${WEAVIATE_QUERY_DEFAULTS_LIMIT:-25}
      AUTHENTICATION_ANONYMOUS_ACCESS_ENABLED: ${WEAVIATE_AUTHENTICATION_ANONYMOUS_ACCESS_ENABLED:-false}
      DEFAULT_VECTORIZER_MODULE: ${WEAVIATE_DEFAULT_VECTORIZER_MODULE:-none}
      CLUSTER_HOSTNAME: ${WEAVIATE_CLUSTER_HOSTNAME:-node1}
      AUTHENTICATION_APIKEY_ENABLED: ${WEAVIATE_AUTHENTICATION_APIKEY_ENABLED:-true}
      AUTHENTICATION_APIKEY_ALLOWED_KEYS: ${WEAVIATE_AUTHENTICATION_APIKEY_ALLOWED_KEYS:-WVF5YThaHlkYwhGUSmCRgsX3tD5ngdN8pkih}
      AUTHENTICATION_APIKEY_USERS: ${WEAVIATE_AUTHENTICATION_APIKEY_USERS:-hello@dify.ai}
      AUTHORIZATION_ADMINLIST_ENABLED: ${WEAVIATE_AUTHORIZATION_ADMINLIST_ENABLED:-true}
      AUTHORIZATION_ADMINLIST_USERS: ${WEAVIATE_AUTHORIZATION_ADMINLIST_USERS:-hello@dify.ai}

  # Qdrant vector store.
  # (if used, you need to set VECTOR_STORE to qdrant in the api & worker service.)
  qdrant:
    image: langgenius/qdrant:v1.7.3
    profiles:
      - qdrant
    restart: always
    volumes:
      - ./volumes/qdrant:/qdrant/storage
    environment:
      QDRANT_API_KEY: ${QDRANT_API_KEY:-difyai123456}

  # The Couchbase vector store.
  couchbase-server:
    build: ./couchbase-server
    profiles:
      - couchbase
    restart: always
    environment:
      - CLUSTER_NAME=dify_search
      - COUCHBASE_ADMINISTRATOR_USERNAME=${COUCHBASE_USER:-Administrator}
      - COUCHBASE_ADMINISTRATOR_PASSWORD=${COUCHBASE_PASSWORD:-password}
      - COUCHBASE_BUCKET=${COUCHBASE_BUCKET_NAME:-Embeddings}
      - COUCHBASE_BUCKET_RAMSIZE=512
      - COUCHBASE_RAM_SIZE=2048
      - COUCHBASE_EVENTING_RAM_SIZE=512
      - COUCHBASE_INDEX_RAM_SIZE=512
      - COUCHBASE_FTS_RAM_SIZE=1024
    hostname: couchbase-server
    container_name: couchbase-server
    working_dir: /opt/couchbase
    stdin_open: true
    tty: true
    entrypoint: [""]
    command: sh -c "/opt/couchbase/init/init-cbserver.sh"
    volumes:
      - ./volumes/couchbase/data:/opt/couchbase/var/lib/couchbase/data
    healthcheck:
      # ensure bucket was created before proceeding
      test: [ "CMD-SHELL", "curl -s -f -u Administrator:password http://localhost:8091/pools/default/buckets | grep -q '\\[{' || exit 1" ]
      interval: 10s
      retries: 10
      start_period: 30s
      timeout: 10s

  # The pgvector vector database.
  pgvector:
    image: pgvector/pgvector:pg16
    profiles:
      - pgvector
    restart: always
    environment:
      PGUSER: ${PGVECTOR_PGUSER:-postgres}
      # The password for the default postgres user.
      POSTGRES_PASSWORD: ${PGVECTOR_POSTGRES_PASSWORD:-difyai123456}
      # The name of the default postgres database.
      POSTGRES_DB: ${PGVECTOR_POSTGRES_DB:-dify}
      # postgres data directory
      PGDATA: ${PGVECTOR_PGDATA:-/var/lib/postgresql/data/pgdata}
    volumes:
      - ./volumes/pgvector/data:/var/lib/postgresql/data
    healthcheck:
      test: ['CMD', 'pg_isready']
      interval: 1s
      timeout: 3s
      retries: 30

  # pgvecto-rs vector store
  pgvecto-rs:
    image: tensorchord/pgvecto-rs:pg16-v0.3.0
    profiles:
      - pgvecto-rs
    restart: always
    environment:
      PGUSER: ${PGVECTOR_PGUSER:-postgres}
      # The password for the default postgres user.
      POSTGRES_PASSWORD: ${PGVECTOR_POSTGRES_PASSWORD:-difyai123456}
      # The name of the default postgres database.
      POSTGRES_DB: ${PGVECTOR_POSTGRES_DB:-dify}
      # postgres data directory
      PGDATA: ${PGVECTOR_PGDATA:-/var/lib/postgresql/data/pgdata}
    volumes:
      - ./volumes/pgvecto_rs/data:/var/lib/postgresql/data
    healthcheck:
      test: ['CMD', 'pg_isready']
      interval: 1s
      timeout: 3s
      retries: 30

  # Chroma vector database
  chroma:
    image: ghcr.io/chroma-core/chroma:0.5.20
    profiles:
      - chroma
    restart: always
    volumes:
      - ./volumes/chroma:/chroma/chroma
    environment:
      CHROMA_SERVER_AUTHN_CREDENTIALS: ${CHROMA_SERVER_AUTHN_CREDENTIALS:-difyai123456}
      CHROMA_SERVER_AUTHN_PROVIDER: ${CHROMA_SERVER_AUTHN_PROVIDER:-chromadb.auth.token_authn.TokenAuthenticationServerProvider}
      IS_PERSISTENT: ${CHROMA_IS_PERSISTENT:-TRUE}

  # OceanBase vector database
  oceanbase:
    image: quay.io/oceanbase/oceanbase-ce:4.3.3.0-100000142024101215
    profiles:
      - oceanbase
    restart: always
    volumes:
      - ./volumes/oceanbase/data:/root/ob
      - ./volumes/oceanbase/conf:/root/.obd/cluster
      - ./volumes/oceanbase/init.d:/root/boot/init.d
    environment:
      OB_MEMORY_LIMIT: ${OCEANBASE_MEMORY_LIMIT:-6G}
      OB_SYS_PASSWORD: ${OCEANBASE_VECTOR_PASSWORD:-difyai123456}
      OB_TENANT_PASSWORD: ${OCEANBASE_VECTOR_PASSWORD:-difyai123456}
      OB_CLUSTER_NAME: ${OCEANBASE_CLUSTER_NAME:-difyai}
      OB_SERVER_IP: '127.0.0.1'

  # Oracle vector database
  oracle:
    image: container-registry.oracle.com/database/free:latest
    profiles:
      - oracle
    restart: always
    volumes:
      - source: oradata
        type: volume
        target: /opt/oracle/oradata
      - ./startupscripts:/opt/oracle/scripts/startup
    environment:
      ORACLE_PWD: ${ORACLE_PWD:-Dify123456}
      ORACLE_CHARACTERSET: ${ORACLE_CHARACTERSET:-AL32UTF8}

  # Milvus vector database services
  etcd:
    container_name: milvus-etcd
    image: quay.io/coreos/etcd:v3.5.5
    profiles:
      - milvus
    environment:
      ETCD_AUTO_COMPACTION_MODE: ${ETCD_AUTO_COMPACTION_MODE:-revision}
      ETCD_AUTO_COMPACTION_RETENTION: ${ETCD_AUTO_COMPACTION_RETENTION:-1000}
      ETCD_QUOTA_BACKEND_BYTES: ${ETCD_QUOTA_BACKEND_BYTES:-4294967296}
      ETCD_SNAPSHOT_COUNT: ${ETCD_SNAPSHOT_COUNT:-50000}
    volumes:
      - ./volumes/milvus/etcd:/etcd
    command: etcd -advertise-client-urls=http://127.0.0.1:2379 -listen-client-urls http://0.0.0.0:2379 --data-dir /etcd
    healthcheck:
      test: ['CMD', 'etcdctl', 'endpoint', 'health']
      interval: 30s
      timeout: 20s
      retries: 3
    networks:
      - milvus

  minio:
    container_name: milvus-minio
    image: minio/minio:RELEASE.2023-03-20T20-16-18Z
    profiles:
      - milvus
    environment:
      MINIO_ACCESS_KEY: ${MINIO_ACCESS_KEY:-minioadmin}
      MINIO_SECRET_KEY: ${MINIO_SECRET_KEY:-minioadmin}
    volumes:
      - ./volumes/milvus/minio:/minio_data
    command: minio server /minio_data --console-address ":9001"
    healthcheck:
      test: ['CMD', 'curl', '-f', 'http://localhost:9000/minio/health/live']
      interval: 30s
      timeout: 20s
      retries: 3
    networks:
      - milvus

  milvus-standalone:
    container_name: milvus-standalone
    image: milvusdb/milvus:v2.3.1
    profiles:
      - milvus
    command: ['milvus', 'run', 'standalone']
    environment:
      ETCD_ENDPOINTS: ${ETCD_ENDPOINTS:-etcd:2379}
      MINIO_ADDRESS: ${MINIO_ADDRESS:-minio:9000}
      common.security.authorizationEnabled: ${MILVUS_AUTHORIZATION_ENABLED:-true}
    volumes:
      - ./volumes/milvus/milvus:/var/lib/milvus
    healthcheck:
      test: ['CMD', 'curl', '-f', 'http://localhost:9091/healthz']
      interval: 30s
      start_period: 90s
      timeout: 20s
      retries: 3
    depends_on:
      - etcd
      - minio
    ports:
      - 19530:19530
      - 9091:9091
    networks:
      - milvus

  # Opensearch vector database
  opensearch:
    container_name: opensearch
    image: opensearchproject/opensearch:latest
    profiles:
      - opensearch
    environment:
      discovery.type: ${OPENSEARCH_DISCOVERY_TYPE:-single-node}
      bootstrap.memory_lock: ${OPENSEARCH_BOOTSTRAP_MEMORY_LOCK:-true}
      OPENSEARCH_JAVA_OPTS: -Xms${OPENSEARCH_JAVA_OPTS_MIN:-512m} -Xmx${OPENSEARCH_JAVA_OPTS_MAX:-1024m}
      OPENSEARCH_INITIAL_ADMIN_PASSWORD: ${OPENSEARCH_INITIAL_ADMIN_PASSWORD:-Qazwsxedc!@#123}
    ulimits:
      memlock:
        soft: ${OPENSEARCH_MEMLOCK_SOFT:--1}
        hard: ${OPENSEARCH_MEMLOCK_HARD:--1}
      nofile:
        soft: ${OPENSEARCH_NOFILE_SOFT:-65536}
        hard: ${OPENSEARCH_NOFILE_HARD:-65536}
    volumes:
      - ./volumes/opensearch/data:/usr/share/opensearch/data
    networks:
      - opensearch-net

  opensearch-dashboards:
    container_name: opensearch-dashboards
    image: opensearchproject/opensearch-dashboards:latest
    profiles:
      - opensearch
    environment:
      OPENSEARCH_HOSTS: '["https://opensearch:9200"]'
    volumes:
      - ./volumes/opensearch/opensearch_dashboards.yml:/usr/share/opensearch-dashboards/config/opensearch_dashboards.yml
    networks:
      - opensearch-net
    depends_on:
      - opensearch

  # MyScale vector database
  myscale:
    container_name: myscale
    image: myscale/myscaledb:1.6.4
    profiles:
      - myscale
    restart: always
    tty: true
    volumes:
      - ./volumes/myscale/data:/var/lib/clickhouse
      - ./volumes/myscale/log:/var/log/clickhouse-server
      - ./volumes/myscale/config/users.d/custom_users_config.xml:/etc/clickhouse-server/users.d/custom_users_config.xml
    ports:
      - ${MYSCALE_PORT:-8123}:${MYSCALE_PORT:-8123}

  # https://www.elastic.co/guide/en/elasticsearch/reference/current/settings.html
  # https://www.elastic.co/guide/en/elasticsearch/reference/current/docker.html#docker-prod-prerequisites
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.14.3
    container_name: elasticsearch
    profiles:
      - elasticsearch
    restart: always
    volumes:
      - dify_es01_data:/usr/share/elasticsearch/data
    environment:
      ELASTIC_PASSWORD: ${ELASTICSEARCH_PASSWORD:-elastic}
      cluster.name: dify-es-cluster
      node.name: dify-es0
      discovery.type: single-node
      xpack.license.self_generated.type: trial
      xpack.security.enabled: 'true'
      xpack.security.enrollment.enabled: 'false'
      xpack.security.http.ssl.enabled: 'false'
    ports:
      - ${ELASTICSEARCH_PORT:-9200}:9200
    healthcheck:
      test: ['CMD', 'curl', '-s', 'http://localhost:9200/_cluster/health?pretty']
      interval: 30s
      timeout: 10s
      retries: 50

  # https://www.elastic.co/guide/en/kibana/current/docker.html
  # https://www.elastic.co/guide/en/kibana/current/settings.html
  kibana:
    image: docker.elastic.co/kibana/kibana:8.14.3
    container_name: kibana
    profiles:
      - elasticsearch
    depends_on:
      - elasticsearch
    restart: always
    environment:
      XPACK_ENCRYPTEDSAVEDOBJECTS_ENCRYPTIONKEY: d1a66dfd-c4d3-4a0a-8290-2abcb83ab3aa
      NO_PROXY: localhost,127.0.0.1,elasticsearch,kibana
      XPACK_SECURITY_ENABLED: 'true'
      XPACK_SECURITY_ENROLLMENT_ENABLED: 'false'
      XPACK_SECURITY_HTTP_SSL_ENABLED: 'false'
      XPACK_FLEET_ISAIRGAPPED: 'true'
      I18N_LOCALE: zh-CN
      SERVER_PORT: '5601'
      ELASTICSEARCH_HOSTS: http://elasticsearch:9200
    ports:
      - ${KIBANA_PORT:-5601}:5601
    healthcheck:
      test: ['CMD-SHELL', 'curl -s http://localhost:5601 >/dev/null || exit 1']
      interval: 30s
      timeout: 10s
      retries: 3

  # unstructured .
  # (if used, you need to set ETL_TYPE to Unstructured in the api & worker service.)
  unstructured:
    image: downloads.unstructured.io/unstructured-io/unstructured-api:latest
    profiles:
      - unstructured
    restart: always
    volumes:
      - ./volumes/unstructured:/app/data

networks:
  # create a network between sandbox, api and ssrf_proxy, and can not access outside.
  ssrf_proxy_network:
    driver: bridge
    internal: true
  milvus:
    driver: bridge
  opensearch-net:
    driver: bridge
    internal: true

volumes:
  oradata:
  dify_es01_data:
